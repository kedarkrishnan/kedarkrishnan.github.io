<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer&#39;s Diary</title>
    <description>A diary of a software developer as he sails through the vast sea of knowledge of ever changing technologies.  Passionate to learn he writes his learnings down to discover more and more.
</description>
    <link>http://kedarkrishnan.github.io/</link>
    <atom:link href="http://kedarkrishnan.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 24 Jan 2016 13:44:57 +0530</pubDate>
    <lastBuildDate>Sun, 24 Jan 2016 13:44:57 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Notes - Java Servlet</title>
        <description>&lt;h1 id=&quot;notes---java-servlet&quot;&gt;Notes - Java Servlet&lt;/h1&gt;

&lt;p&gt;Java servlets are programs that run on a Web or Application server and act as a middle layer between a request coming form a browser or HTTP client and database or applications. &lt;/p&gt;

&lt;h2 id=&quot;servlet-life-cycle&quot;&gt;Servlet Life Cycle&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Loading&lt;/strong&gt; - Class loader load the servlet class. Every web application will get a different class loader which would be used for loading the web components. This allows deployment of two versions of the same application in the same container and every application can have same full class names.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Instantiation&lt;/strong&gt; - Servlet instance is created by the web container when the servlet is loaded.
During initialization it is possible to get ServletException. Raising of this exception in init method will signal container that some error occurred and container will stop initialization and mark servlet instance as ready for garbage collector and this will not cause calling of the destroy method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt; - Called only once when the servlet is created&lt;code&gt;init(ServletConfig config)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Service&lt;/strong&gt; - Called by web container to handle request from clients &lt;code&gt;service(ServletRequest request, 
ServletResponse response)&lt;/code&gt;.
During service method it is possible to get ServletException or UnavailableException. This exceptions can be temporary or permanent. In case of temporary exception server will block calling of service method for some time, but in case of permanent exception destroy method will be called and servlet will be ready for garbage collector, and every future call to this servlet will lead to 404 response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Destroy&lt;/strong&gt; - Called before removing thr servlet instance &lt;code&gt;destroy()&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Web.xml&lt;/p&gt;
&lt;servlet&gt;
	&lt;servlet-name&gt;Hello World&lt;/servlet-name&gt;
	&lt;servlet-class&gt;HelloWorld&lt;/servlet-class&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;Hello&lt;/param-name&gt;
	&lt;/init-param&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;Hello World&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/helloworld&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;h2 id=&quot;filters-servlet&quot;&gt;Filters Servlet&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Intercept the request from the client before they access a resource at back end&lt;/li&gt;
  &lt;li&gt;Manipulating responses from server before they are send back to the client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;web.xml&lt;/p&gt;
&lt;filter&gt;
   &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;
   &lt;filter-class&gt;LogFilter&lt;/filter-class&gt;
   &lt;init-param&gt;
	  &lt;param-name&gt;test-param&lt;/param-name&gt;
	  &lt;param-value&gt;Initialization Paramter&lt;/param-value&gt;
   &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
   &lt;filter-name&gt;LogFilter&lt;/filter-name&gt;
   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
&lt;p&gt;The order of filter-mapping elements in web.xml determines the order in which the web container applies the filter to the servlet.&lt;/p&gt;

&lt;h2 id=&quot;error-page&quot;&gt;Error Page&lt;/h2&gt;
&lt;p&gt;Servlet exception can be handled using the configurations in web.xml for error-page either by using an error-code or an exception-type.&lt;/p&gt;

&lt;p&gt;web.xml&lt;/p&gt;
&lt;error-page&gt;
	&lt;error-code&gt;403&lt;/error-code&gt;
	&lt;location&gt;/HandlerClass&lt;/location&gt;
&lt;/error-page&gt;
&lt;error-page&gt;
	&lt;exception-type&gt;java.io.IOException&lt;/exception-type&gt;
	&lt;location&gt;/HandlerClass&lt;/location&gt;
&lt;/error-page&gt;

&lt;h2 id=&quot;servletcontext&quot;&gt;ServletContext&lt;/h2&gt;
&lt;p&gt;Every application is executed inside its own context. The context attributes are application scoped attributes and available to all the servlets in the application. &lt;/p&gt;
&lt;context-param&gt;
	&lt;param-name&gt;contextParameter&lt;/param-name&gt;
	&lt;param-value&gt;value&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;h2 id=&quot;servletconfig&quot;&gt;ServletConfig&lt;/h2&gt;
&lt;p&gt;Every servlet has it’s own ServletConfig object and servlet container is responsible for instantiating the object.&lt;/p&gt;

&lt;h2 id=&quot;request-dispatcher&quot;&gt;Request Dispatcher&lt;/h2&gt;
&lt;p&gt;RequestDispatcher interface is used to forward the request to another resource that can be HTML, JSP or another servlet in same application. &lt;/p&gt;

&lt;h2 id=&quot;servletwrapper&quot;&gt;ServletWrapper&lt;/h2&gt;
&lt;p&gt;Wrapper classes are provided to help developers with custom implementation of servlet request and response.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTPServletRequestWrapper&lt;/code&gt; &lt;code&gt;HTTPServletResponseWrapper&lt;/code&gt; &lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 23:51:00 +0530</pubDate>
        <link>http://kedarkrishnan.github.io/blogs/java/2015/09/30/servlet.html</link>
        <guid isPermaLink="true">http://kedarkrishnan.github.io/blogs/java/2015/09/30/servlet.html</guid>
        
        
        <category>blogs/java</category>
        
      </item>
    
      <item>
        <title>Understanding Node</title>
        <description>&lt;p&gt;Recently NodeJs is the next happening stuff in the technology world. I try to explore what this baby is all about.&lt;/p&gt;

&lt;h2 id=&quot;whats-node&quot;&gt;What’s Node?&lt;/h2&gt;
&lt;p&gt;NodeJs provides a &lt;strong&gt;purely evented, non-blocking infrastructure&lt;/strong&gt; to script &lt;strong&gt;highly concurrent&lt;/strong&gt; programs.&lt;/p&gt;

&lt;p&gt;Node is :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server-side Javascript platform&lt;/li&gt;
  &lt;li&gt;Build on Google’s V8 engine, used by Googles Chrome browser&lt;/li&gt;
  &lt;li&gt;Event driven&lt;/li&gt;
  &lt;li&gt;non-blocking I/O&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/commonjs.html&quot; target=&quot;_blank&quot;&gt;Uses CommonJs module system&lt;/a&gt; – &lt;small&gt;Module format to solve JavaScript scope issues by making sure each module is executed in its own namespace.&lt;/small&gt;&lt;/li&gt;
  &lt;li&gt;Written mainly C/C++ and Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-non-blocking-io&quot;&gt;Why Non-blocking I/O?&lt;/h2&gt;

&lt;p&gt;Web application offent does a connection to a database or other I/O activity during which the software is just waiting for the response. 
&lt;img src=&quot;/images/blog/webServerUsingThreads.png&quot; alt=&quot;Webserver using thread &quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be multi tasked by having different threads of execution running.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://wiki.dreamhost.com/Web_Server_Performance_Comparison&quot; target=&quot;_blank&quot;&gt;comparison&lt;/a&gt; between Apache web server and Nginx shows: &lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;img src=&quot;/images/blog/webserverRequestsGraph.jpg&quot; alt=&quot;Apache Nginx request graph&quot; class=&quot;img-responsive col-md-6&quot; /&gt;
&lt;img src=&quot;/images/blog/webserverMemoryGraph.jpg&quot; alt=&quot;Apache Nginx memory graph&quot; class=&quot;img-responsive col-md-6&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Point to note here is Apache uses threads while Nginx uses event loop for concurrency.&lt;/p&gt;

&lt;p&gt;Thus with concurrency using threads or coroutines one can see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Throughput &lt;small&gt;(request / sec)&lt;/small&gt; reduceses as number of users increases - Context switching is not free &lt;/li&gt;
  &lt;li&gt;Memory footprint increases as number of concurrent uses increase - Execution stacks takes up memory &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Threaded concurrency needs handling of memory issues, thread blocking issues.&lt;/p&gt;

&lt;p&gt;Event loop based approach is the best for highly concurrent programs. &lt;/p&gt;

&lt;h2 id=&quot;whats-event-loop&quot;&gt;What’s event loop?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/webServerUsingEventLoop.png&quot; alt=&quot;Webserver using thread &quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In an event loop the server uses single thread to run a loop for checking different events occuring like request received, data ready etc. As a particular event occurs the event loop catches it and immediately hands over the processing to another execution thread along with a call back function stating once you are done call back this function. When the call back function is called the event loop again catches it back completes the process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single threaded event loops require I/O to be non-blocking.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a blocking I/O takes places within the loop it cannot process any other request as its single threaded and all the other request get rejected.&lt;/p&gt;

&lt;p&gt;Javascript is designed specially to be used with an event loop:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anonymous functions, closures&lt;/li&gt;
  &lt;li&gt;Only one callback at a time&lt;/li&gt;
  &lt;li&gt;I/O through DOM event callbacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Node uses non-blocking and event loop concept internally that optimizes an application’s throughput and scalability.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;node-good-parts&quot;&gt;Node Good Parts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Node avoids spinning up threads &lt;/li&gt;
  &lt;li&gt;Node can delegate execution of the request to a separate component&lt;/li&gt;
  &lt;li&gt;Node talks JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;node-bad-parts&quot;&gt;Node Bad Parts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Node sucks at computational intensive tasks&lt;/li&gt;
  &lt;li&gt;Node doesn’t fully utilize multi-core CPUs&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 10 Jul 2015 10:46:00 +0530</pubDate>
        <link>http://kedarkrishnan.github.io/blogs/javascript/2015/07/10/understanding-node.html</link>
        <guid isPermaLink="true">http://kedarkrishnan.github.io/blogs/javascript/2015/07/10/understanding-node.html</guid>
        
        
        <category>blogs/javascript</category>
        
      </item>
    
      <item>
        <title>ng-me</title>
        <description>&lt;h1 id=&quot;basics-of-angular&quot;&gt;Basics of Angular&lt;/h1&gt;

&lt;h2 id=&quot;way-data-binding&quot;&gt;2 way Data binding&lt;/h2&gt;
&lt;p&gt;In case of one way binding only the values declared in the javascript are displayed on the browser page (DOM objects). While in two way data binding any change in the browser (DOM input controls) is automatically reflected in the javascript variable.&lt;/p&gt;

&lt;h2 id=&quot;model-view-view-model-mvvw--mv--mvw&quot;&gt;Model View View Model (MVVW === MV* === MVW)&lt;/h2&gt;
&lt;p&gt;In a Server end architecture MVC =&amp;gt; Model View Controller where model handles the data, the controller is responsible for the flow management and the View is the presentation layer.
In case of client end architecture there can be a need of massaging the data obtained in the Model thus creating a new Model for the view aka. View Model.
The controller here does much more than managing the flow hence Model view Whatever (MVW). &lt;/p&gt;

&lt;h2 id=&quot;client-side-templates&quot;&gt;Client side templates&lt;/h2&gt;
&lt;p&gt;In the first server call from the client the basic template of the layout is send back and in all the subsequent calls only data is send to and fro between the client and the server.&lt;/p&gt;

&lt;h2 id=&quot;client-side-routing&quot;&gt;Client side routing&lt;/h2&gt;
&lt;p&gt;Client decides what view to display based on the URL, server is responsible for only providing the data.&lt;/p&gt;

&lt;h2 id=&quot;inversion-of-control&quot;&gt;Inversion of Control&lt;/h2&gt;
&lt;p&gt;The objects needed are provided rather than one having to invoke the object.&lt;/p&gt;

&lt;h2 id=&quot;ng-directives&quot;&gt;ng-directives&lt;/h2&gt;
&lt;p&gt;Angular helps you extend HTML with new attributes called Directives thus making the static HTML dynamic.
The directive are used with ‘data’ prefixed to them as some browsers do not understand the angular specific tags, adding of data makes them HTML5 attributes and thus compatible.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-app&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Initializes the angular app within the tag it is added.  &lt;strong&gt;Javascript side maps to:&lt;/strong&gt; &lt;code&gt;angular.module(&#39;todoApp&#39;,[])&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-controller&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Makes scope objects available to the html. &lt;strong&gt;Javascript side maps to:&lt;/strong&gt; &lt;code&gt;angular.controller(&#39;TodoAppController&#39;,function($scope){}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-repeat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Looping through array.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-model&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bind data to html.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-bind&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Use to avoid showing of ‘curleys’ when angular js is at the end. Used instead of &lt;strong&gt;angular expression.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk&quot; target=&quot;_blank&quot;&gt;AngularJS Batarang&lt;/a&gt;&lt;/strong&gt;
Extends the Chrome Developer Tools, adding tools for debugging and profiling AngularJS applications.&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jul 2015 22:46:00 +0530</pubDate>
        <link>http://kedarkrishnan.github.io/blogs/javascript/2015/07/05/ng-me.html</link>
        <guid isPermaLink="true">http://kedarkrishnan.github.io/blogs/javascript/2015/07/05/ng-me.html</guid>
        
        
        <category>blogs/javascript</category>
        
      </item>
    
  </channel>
</rss>
