<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer&#39;s Diary</title>
    <description>A diary of a software developer as he sails through the vast sea of knowledge of ever changing technologies.  Passionate to learn he rights his learnings down to discover more and more...
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 06 Jul 2015 00:37:22 +0530</pubDate>
    <lastBuildDate>Mon, 06 Jul 2015 00:37:22 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>ng-me</title>
        <description>&lt;h2 id=&quot;basics-of-angular&quot;&gt;Basics of Angular&lt;/h2&gt;

&lt;h3 id=&quot;way-data-binding&quot;&gt;2 way Data binding&lt;/h3&gt;
&lt;p&gt;In case of one way binding only the values declared in the javascript are displayed on the browser page (DOM objects). While in two way data binding any change in the browser (DOM input controls) is automatically reflected in the javascript variable.&lt;/p&gt;

&lt;h3 id=&quot;model-view-view-model-mvvw--mv--mvw&quot;&gt;Model View View Model (MVVW === MV* === MVW)&lt;/h3&gt;
&lt;p&gt;In a Server end architecture MVC =&amp;gt; Model View Controller where model handels the data, the controller is responsible for the flow managment and the View is the presentation layer.
In case of client end architecture there can be a need of massaging the data obtained in the Model thus creating a new Model for the view aka. View Model.
The controller here does much more than managing the flow hence Model view Whatever (MVW). &lt;/p&gt;

&lt;h3 id=&quot;client-side-templates&quot;&gt;Client side templates&lt;/h3&gt;
&lt;p&gt;In the first server call from the client the basic template of the layout is send back and in all the subsequent calls only data is send to and fro between the client and the server.&lt;/p&gt;

&lt;h3 id=&quot;client-side-routing&quot;&gt;Client side routing&lt;/h3&gt;
&lt;p&gt;Client decides what view to display based on the URL, server is responsible for only providing the data.&lt;/p&gt;

&lt;h3 id=&quot;inversion-of-control&quot;&gt;Inversion of Control&lt;/h3&gt;
&lt;p&gt;The objects needed are provided rather than one having to invoke the object.&lt;/p&gt;

&lt;h3 id=&quot;ng-directives&quot;&gt;ng-directives&lt;/h3&gt;
&lt;p&gt;Angular helps you extend HTML with new attributes called Directives thus making the static HTML dynamic.
The directive are used with ‘data’ prefixed to them as some browsers do not understand the angular specific tags, adding of data makes them HTML5 attributes and thus compatible.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Directive&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Javascript side maps to&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-app&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Initializes the angular app within the tag it is added&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;angular.module(‘todoApp’,[])&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-controller&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Makes scope objects available to the html.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;angular.controller(‘TodoAppController’,function($scope){}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-repeat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Looping through array&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-model&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bind data to html.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ng-bind&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Use to avoid showing of ‘curleys’ when angular js is at the end. Used instead of &lt;code&gt;angular expression.&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 05 Jun 2015 22:46:00 +0530</pubDate>
        <link>http://yourdomain.com/angular/2015/06/05/ng-me.html</link>
        <guid isPermaLink="true">http://yourdomain.com/angular/2015/06/05/ng-me.html</guid>
        
        
        <category>angular</category>
        
      </item>
    
  </channel>
</rss>
